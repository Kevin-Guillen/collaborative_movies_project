// Mocks generated by Mockito 5.0.12 from annotations
// in movies_project/test/movie_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_project/src/model/movies.dart' as _i3;
import 'package:movies_project/src/resources/movies_api_provider.dart' as _i2;
import 'package:movies_project/src/resources/movies_repository.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeMoviesApiProvider extends _i1.Fake implements _i2.MoviesApiProvider {
}

class _FakeMovies extends _i1.Fake implements _i3.Movies {}

/// A class which mocks [MoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRepository extends _i1.Mock implements _i4.MoviesRepository {
  MockMoviesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MoviesApiProvider get moviesApiProvider =>
      (super.noSuchMethod(Invocation.getter(#moviesApiProvider),
          returnValue: _FakeMoviesApiProvider()) as _i2.MoviesApiProvider);

  @override
  _i5.Future<_i3.Movies> fetchTrendingMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchTrendingMovies, []),
              returnValue: Future<_i3.Movies>.value(_FakeMovies()))
          as _i5.Future<_i3.Movies>);

  @override
  _i5.Future<_i3.Movies> searchByMovieName(String? movieName) =>
      (super.noSuchMethod(Invocation.method(#searchByMovieName, [movieName]),
              returnValue: Future<_i3.Movies>.value(_FakeMovies()))
          as _i5.Future<_i3.Movies>);
}
